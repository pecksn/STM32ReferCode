/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    stm32f1xx_it.c
  * @brief   Interrupt Service Routines.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_it.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usart1Dma.h"
#include "Y_Step_motor.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */

/* USER CODE END TD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern DMA_HandleTypeDef hdma_usart1_rx;
extern DMA_HandleTypeDef hdma_usart2_rx;
extern DMA_HandleTypeDef hdma_usart3_rx;
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;
extern UART_HandleTypeDef huart3;
/* USER CODE BEGIN EV */

/* USER CODE END EV */

/******************************************************************************/
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}

/******************************************************************************/
/* STM32F1xx Peripheral Interrupt Handlers                                    */
/* Add here the Interrupt Handlers for the used peripherals.                  */
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
  /* USER CODE BEGIN RCC_IRQn 0 */

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */
	TIM_HandleTypeDef *htim2 = &htim2_STEPMOTOR;
    /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim2, TIM_FLAG_CC1) != RESET)
  {   
      __HAL_TIM_CLEAR_IT(htim2, TIM_IT_CC1);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_1); //X轴对应的定时器通道
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim2, TIM_FLAG_CC2) != RESET)
  {
      __HAL_TIM_CLEAR_IT(htim2, TIM_IT_CC2);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_2);//Y轴对应的定时器通道
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim2, TIM_FLAG_CC3) != RESET)
  {
      __HAL_TIM_CLEAR_IT(htim2, TIM_IT_CC3);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_3);//Z轴对应的定时器通道
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim2, TIM_FLAG_CC4) != RESET)
  {
      __HAL_TIM_CLEAR_IT(htim2, TIM_IT_CC4);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_4);//X轴对应的定时器通道
  }
  /* USER CODE END TIM2_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */
TIM_HandleTypeDef *htim3 = &htim3_STEPMOTOR;
    /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim3, TIM_FLAG_CC1) != RESET)
  {   
      __HAL_TIM_CLEAR_IT(htim3, TIM_IT_CC1);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_5); //X轴对应的定时器通道
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim3, TIM_FLAG_CC2) != RESET)
  {
      __HAL_TIM_CLEAR_IT(htim3, TIM_IT_CC2);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_6);//Y轴对应的定时器通道
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim3, TIM_FLAG_CC3) != RESET)
  {
      __HAL_TIM_CLEAR_IT(htim3, TIM_IT_CC3);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_7);//Z轴对应的定时器通道
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim3, TIM_FLAG_CC4) != RESET)
  {
      __HAL_TIM_CLEAR_IT(htim3, TIM_IT_CC4);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_8);//X轴对应的定时器通道
  }
  /* USER CODE END TIM3_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */
TIM_HandleTypeDef *htim4 = &htim4_STEPMOTOR;
    /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim4, TIM_FLAG_CC1) != RESET)
  {   
      __HAL_TIM_CLEAR_IT(htim4, TIM_IT_CC1);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_9); //X轴对应的定时器通道
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim4, TIM_FLAG_CC2) != RESET)
  {
      __HAL_TIM_CLEAR_IT(htim4, TIM_IT_CC2);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_10);//Y轴对应的定时器通道
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim4, TIM_FLAG_CC3) != RESET)
  {
      __HAL_TIM_CLEAR_IT(htim4, TIM_IT_CC3);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_11);//Z轴对应的定时器通道
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim4, TIM_FLAG_CC4) != RESET)
  {
      __HAL_TIM_CLEAR_IT(htim4, TIM_IT_CC4);
      /* Output compare event */
      HAL_TIM_OC_Callback(AXIS_12);//X轴对应的定时器通道
  }
  /* USER CODE END TIM4_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint16_t temp1 = 0;
	__HAL_UART_CLEAR_IDLEFLAG(&huart1);
	HAL_UART_DMAStop(&huart1); // 关闭DMA
	temp1 = huart1.Instance -> SR; // 清除SR状态寄存器
	temp1 = huart1.Instance -> DR; // 清除DR数据寄存器，用来清除中断
	temp1 = hdma_usart1_rx.Instance -> CNDTR; // 获取未传输的数据个数，计算出接收到的数据长度
	//temp = hdma_usart2_rx.Instance -> NDTR; // F4
	Usart1type.UsartDMARecLEN = USART1_DMA_REC_SIZE - temp1;
	HAL_UART_RxCpltCallback(&huart1); //调用回调函数
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
	HAL_UART_Receive_DMA(&huart1,Usart1type.Usart1DMARecBuffer,USART1_DMA_REC_SIZE);
  /* USER CODE END USART1_IRQn 1 */
}

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint16_t temp2 = 0;
	__HAL_UART_CLEAR_IDLEFLAG(&huart2);
	HAL_UART_DMAStop(&huart2); // 关闭DMA
	temp2 = huart2.Instance -> SR; // 清除SR状态寄存器
	temp2 = huart2.Instance -> DR; // 清除DR数据寄存器，用来清除中断
	temp2 = hdma_usart2_rx.Instance -> CNDTR; // 获取未传输的数据个数，计算出接收到的数据长度
	//temp = hdma_usart2_rx.Instance -> NDTR; // F4
	Usart2type.UsartDMARecLEN = USART2_DMA_REC_SIZE - temp2;
	HAL_UART_RxCpltCallback(&huart2); //调用回调函数
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */
	HAL_UART_Receive_DMA(&huart2,Usart2type.Usart2DMARecBuffer,USART2_DMA_REC_SIZE);
  /* USER CODE END USART1_IRQn 1 */
}

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint16_t temp3 = 0;
	__HAL_UART_CLEAR_IDLEFLAG(&huart3);
	HAL_UART_DMAStop(&huart3); // 关闭DMA
	temp3 = huart3.Instance -> SR; // 清除SR状态寄存器
	temp3 = huart3.Instance -> DR; // 清除DR数据寄存器，用来清除中断
	temp3 = hdma_usart3_rx.Instance -> CNDTR; // 获取未传输的数据个数，计算出接收到的数据长度
	//temp = hdma_usart2_rx.Instance -> NDTR; // F4
	Usart3type.UsartDMARecLEN = USART3_DMA_REC_SIZE - temp3;
	HAL_UART_RxCpltCallback(&huart3); //调用回调函数
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
	HAL_UART_Receive_DMA(&huart3,Usart3type.Usart3DMARecBuffer,USART3_DMA_REC_SIZE);
  /* USER CODE END USART3_IRQn 1 */
}

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
