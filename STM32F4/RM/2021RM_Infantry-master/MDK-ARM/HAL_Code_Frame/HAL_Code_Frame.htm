<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [HAL_Code_Frame\HAL_Code_Frame.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image HAL_Code_Frame\HAL_Code_Frame.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Fri Jan 12 20:25:30 2024
<BR><P>
<H3>Maximum Stack Usage =        472 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a0]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a0]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a0]">ADC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[ec]">ALL_Send</a> from freertos.o(i.ALL_Send) referenced from freertos.o(.constdata)
 <LI><a href="#[5b]">ANO_Send_Data_V4</a> from ano.o(i.ANO_Send_Data_V4) referenced 2 times from ano.o(.data)
 <LI><a href="#[5a]">ANO_Send_FloatData</a> from ano.o(i.ANO_Send_FloatData) referenced 2 times from ano.o(.data)
 <LI><a href="#[5c]">ANO_Send_FloatData_2</a> from ano.o(i.ANO_Send_FloatData_2) referenced 2 times from ano.o(.data)
 <LI><a href="#[f4]">AllCanSend</a> from task_cansend.o(i.AllCanSend) referenced from freertos.o(.constdata)
 <LI><a href="#[f1]">All_Init</a> from freertos.o(i.All_Init) referenced from freertos.o(.constdata)
 <LI><a href="#[88]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2b]">Buzzer_On</a> from devicesmonitor.o(i.Buzzer_On) referenced 2 times from devicesmonitor.o(.data)
 <LI><a href="#[a2]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[a3]">CAN1_RX1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[a4]">CAN1_SCE_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[a1]">CAN1_TX_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[ce]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[cf]">CAN2_RX1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d0]">CAN2_SCE_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[cd]">CAN2_TX_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[2e]">CAN_0x1FF_SendData</a> from monitor_rm_can.o(i.CAN_0x1FF_SendData) referenced 2 times from monitor_rm_can.o(.data)
 <LI><a href="#[2f]">CAN_0x200_SendData</a> from monitor_rm_can.o(i.CAN_0x200_SendData) referenced 2 times from monitor_rm_can.o(.data)
 <LI><a href="#[30]">CAN_0x2FF_SendData</a> from monitor_rm_can.o(i.CAN_0x2FF_SendData) referenced 2 times from monitor_rm_can.o(.data)
 <LI><a href="#[31]">CAN_0x601_SendData</a> from monitor_rm_can.o(i.CAN_0x601_SendData) referenced 2 times from monitor_rm_can.o(.data)
 <LI><a href="#[54]">CAN_IT_Init</a> from bsp_can.o(i.CAN_IT_Init) referenced 2 times from bsp_can.o(.data)
 <LI><a href="#[55]">CAN_RxMessage_Export_Date</a> from bsp_can.o(i.CAN_RxMessage_Export_Date) referenced 2 times from bsp_can.o(.data)
 <LI><a href="#[3a]">CAN_SendControl</a> from robot_control.o(i.CAN_SendControl) referenced 2 times from robot_control.o(.data)
 <LI><a href="#[56]">CAN_SendData</a> from bsp_can.o(i.CAN_SendData) referenced 2 times from bsp_can.o(.data)
 <LI><a href="#[83]">CIMU_Reset</a> from dji_c_imu.o(i.CIMU_Reset) referenced 2 times from dji_c_imu.o(.data)
 <LI><a href="#[ed]">Can1Receives</a> from task_canmsg.o(i.Can1Receives) referenced from freertos.o(.constdata)
 <LI><a href="#[ee]">Can2Receives</a> from task_canmsg.o(i.Can2Receives) referenced from freertos.o(.constdata)
 <LI><a href="#[47]">CapEnergy_Show</a> from rm_judgesystem.o(i.CapEnergy_Show) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[4e]">Cap_EnergyUpdata</a> from rm_judgesystem.o(i.Cap_EnergyUpdata) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[45]">Car_DistanceFrame</a> from rm_judgesystem.o(i.Car_DistanceFrame) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[8]">ChassisCapControl</a> from chassis_control.o(i.ChassisCapControl) referenced 2 times from chassis_control.o(.data)
 <LI><a href="#[6]">Chassis_Init</a> from chassis_control.o(i.Chassis_Init) referenced 2 times from chassis_control.o(.data)
 <LI><a href="#[7]">Chassis_processing</a> from chassis_control.o(i.Chassis_processing) referenced 2 times from chassis_control.o(.data)
 <LI><a href="#[57]">Check_CAN</a> from bsp_can.o(i.Check_CAN) referenced 2 times from bsp_can.o(.data)
 <LI><a href="#[7a]">Check_DJIIMU</a> from dji_imu.o(i.Check_DJIIMU) referenced 2 times from dji_imu.o(.data)
 <LI><a href="#[82]">Check_DJI_C_IMU</a> from dji_c_imu.o(i.Check_DJI_C_IMU) referenced 2 times from dji_c_imu.o(.data)
 <LI><a href="#[62]">Check_DR16</a> from dr16_remote.o(i.Check_DR16) referenced 2 times from dr16_remote.o(.data)
 <LI><a href="#[68]">Check_FrictionM3508</a> from m3508_motor.o(i.Check_FrictionM3508) referenced 2 times from m3508_motor.o(.data)
 <LI><a href="#[73]">Check_GyIMU</a> from wolf_gyimu.o(i.Check_GyIMU) referenced 2 times from wolf_gyimu.o(.data)
 <LI><a href="#[6f]">Check_Judge</a> from rm_judgesystem.o(i.Check_Judge) referenced 2 times from rm_judgesystem.o(.data)
 <LI><a href="#[64]">Check_M2006</a> from m2006_motor.o(i.Check_M2006) referenced 2 times from m2006_motor.o(.data)
 <LI><a href="#[6c]">Check_M6020</a> from m6020_motor.o(i.Check_M6020) referenced 2 times from m6020_motor.o(.data)
 <LI><a href="#[7e]">Check_SuperCapacitor</a> from supercapacitor.o(i.Check_SuperCapacitor) referenced 2 times from supercapacitor.o(.data)
 <LI><a href="#[27]">Check_Vision</a> from control_vision.o(i.Check_Vision) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[67]">Check_WheelM3508</a> from m3508_motor.o(i.Check_WheelM3508) referenced 2 times from m3508_motor.o(.data)
 <LI><a href="#[2]">ClassisFollow_PID</a> from pid.o(i.ClassisFollow_PID) referenced 2 times from chassis_control.o(.data)
 <LI><a href="#[3]">ClassisTwister_PID</a> from pid.o(i.ClassisTwister_PID) referenced 2 times from chassis_control.o(.data)
 <LI><a href="#[14]">Cloud_IMUPITCHIPID</a> from pid.o(i.Cloud_IMUPITCHIPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[13]">Cloud_IMUPITCHOPID</a> from pid.o(i.Cloud_IMUPITCHOPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[12]">Cloud_IMUYAWIPID</a> from pid.o(i.Cloud_IMUYAWIPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[11]">Cloud_IMUYAWOPID</a> from pid.o(i.Cloud_IMUYAWOPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[19]">Cloud_Init</a> from cloud_control.o(i.Cloud_Init) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[c]">Cloud_PITCHIPID</a> from pid.o(i.Cloud_PITCHIPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[b]">Cloud_PITCHOPID</a> from pid.o(i.Cloud_PITCHOPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[18]">Cloud_VisionIMUPITCHIPID</a> from pid.o(i.Cloud_VisionIMUPITCHIPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[17]">Cloud_VisionIMUPITCHOPID</a> from pid.o(i.Cloud_VisionIMUPITCHOPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[16]">Cloud_VisionIMUYAWIPID</a> from pid.o(i.Cloud_VisionIMUYAWIPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[15]">Cloud_VisionIMUYAWOPID</a> from pid.o(i.Cloud_VisionIMUYAWOPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[a]">Cloud_YAWIPID</a> from pid.o(i.Cloud_YAWIPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[9]">Cloud_YAWOPID</a> from pid.o(i.Cloud_YAWOPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[1c]">Cloud_getYawAngleWithCenter</a> from cloud_control.o(i.Cloud_getYawAngleWithCenter) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[1a]">Cloud_processing_WithIMU</a> from cloud_control.o(i.Cloud_processing_WithIMU) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[1b]">Cloud_processing_WithoutIMU</a> from cloud_control.o(i.Cloud_processing_WithoutIMU) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[dc]">DCMI_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[7f]">DJI_C_Euler_getInfo</a> from dji_c_imu.o(i.DJI_C_Euler_getInfo) referenced 2 times from dji_c_imu.o(.data)
 <LI><a href="#[80]">DJI_C_Gyro_getInfo</a> from dji_c_imu.o(i.DJI_C_Gyro_getInfo) referenced 2 times from dji_c_imu.o(.data)
 <LI><a href="#[75]">DJI_IMU_Init</a> from dji_imu.o(i.DJI_IMU_Init) referenced 2 times from dji_imu.o(.data)
 <LI><a href="#[f3]">DJI_OLED</a> from task_oled.o(i.DJI_OLED) referenced from freertos.o(.constdata)
 <LI><a href="#[99]">DMA1_Stream0_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[9a]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[9b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[9c]">DMA1_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[9d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[9e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[9f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[bd]">DMA1_Stream7_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[e5]">DMA2D_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[c6]">DMA2_Stream0_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[c7]">DMA2_Stream1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[c8]">DMA2_Stream2_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[c9]">DMA2_Stream3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[ca]">DMA2_Stream4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d2]">DMA2_Stream5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d3]">DMA2_Stream6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d4]">DMA2_Stream7_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[58]">DMA_USART_Receive_IT_Init</a> from bsp_usart.o(i.DMA_USART_Receive_IT_Init) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[59]">DMA_USART_Send_IT_Init</a> from bsp_usart.o(i.DMA_USART_Send_IT_Init) referenced 2 times from bsp_usart.o(.data)
 <LI><a href="#[61]">DR16_DataCheck</a> from dr16_remote.o(i.DR16_DataCheck) referenced 2 times from dr16_remote.o(.data)
 <LI><a href="#[5d]">DR16_Handler</a> from dr16_remote.o(i.DR16_Handler) referenced 2 times from dr16_remote.o(.data)
 <LI><a href="#[5e]">DR16_USART_Receive_DMA</a> from dr16_remote.o(i.DR16_USART_Receive_DMA) referenced 2 times from dr16_remote.o(.data)
 <LI><a href="#[8b]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[f2]">Detect</a> from task_devicesmonitor.o(i.Detect) referenced from freertos.o(.constdata)
 <LI><a href="#[2d]">DevicesInit</a> from devicesmonitor.o(i.DevicesInit) referenced 2 times from devicesmonitor.o(.data)
 <LI><a href="#[2c]">DevicesMonitor_Alert</a> from devicesmonitor.o(i.DevicesMonitor_Alert) referenced 2 times from devicesmonitor.o(.data)
 <LI><a href="#[2a]">DevicesMonitor_Init</a> from devicesmonitor.o(i.DevicesMonitor_Init) referenced 2 times from devicesmonitor.o(.data)
 <LI><a href="#[29]">DevicesMonitor_update</a> from devicesmonitor.o(i.DevicesMonitor_update) referenced 2 times from devicesmonitor.o(.data)
 <LI><a href="#[cb]">ETH_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[cc]">ETH_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[94]">EXTI0_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b6]">EXTI15_10_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[95]">EXTI1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[96]">EXTI2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[97]">EXTI3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[98]">EXTI4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[a5]">EXTI9_5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[92]">FLASH_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[be]">FMC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[de]">FPU_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[ef]">Fixed_Sampling</a> from task_sampling.o(i.Fixed_Sampling) referenced from freertos.o(.constdata)
 <LI><a href="#[3f]">FricRead</a> from shoot.o(i.FricRead) referenced 2 times from shoot.o(.data)
 <LI><a href="#[40]">FricWrite</a> from shoot.o(i.FricWrite) referenced 2 times from shoot.o(.data)
 <LI><a href="#[70]">GY6050_Init</a> from wolf_gyimu.o(i.GY6050_Init) referenced 2 times from wolf_gyimu.o(.data)
 <LI><a href="#[74]">GY6050_PitErr</a> from wolf_gyimu.o(i.GY6050_PitErr) referenced 2 times from wolf_gyimu.o(.data)
 <LI><a href="#[71]">GY6050_getInfo</a> from wolf_gyimu.o(i.GY6050_getInfo) referenced 2 times from wolf_gyimu.o(.data)
 <LI><a href="#[5f]">GetKeyMouseAction</a> from dr16_remote.o(i.GetKeyMouseAction) referenced 2 times from dr16_remote.o(.data)
 <LI><a href="#[25]">GetVisionDiscMode</a> from control_vision.o(i.GetVisionDiscMode) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[26]">GetVisionHitMode</a> from control_vision.o(i.GetVisionHitMode) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[49]">Green_ShowOn</a> from rm_judgesystem.o(i.Green_ShowOn) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[77]">HAL_imu_ahrs_update</a> from dji_imu.o(i.HAL_imu_ahrs_update) referenced 2 times from dji_imu.o(.data)
 <LI><a href="#[78]">HAL_imu_attitude_update</a> from dji_imu.o(i.HAL_imu_attitude_update) referenced 2 times from dji_imu.o(.data)
 <LI><a href="#[76]">HAL_mpu_get_data</a> from dji_imu.o(i.HAL_mpu_get_data) referenced 2 times from dji_imu.o(.data)
 <LI><a href="#[dd]">HASH_RNG_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[86]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[ae]">I2C1_ER_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[ad]">I2C1_EV_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b0]">I2C2_ER_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[af]">I2C2_EV_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d7]">I2C3_ER_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d6]">I2C3_EV_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[1d]">IMUData_chance</a> from cloud_control.o(i.IMUData_chance) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[43]">IMU_GetData_Compensate</a> from imu_compensate.o(i.IMU_GetData_Compensate) referenced 2 times from imu_compensate.o(.data)
 <LI><a href="#[79]">IMU_Reset</a> from dji_imu.o(i.IMU_Reset) referenced 2 times from dji_imu.o(.data)
 <LI><a href="#[72]">IMU_processing</a> from wolf_gyimu.o(i.IMU_processing) referenced 2 times from wolf_gyimu.o(.data)
 <LI><a href="#[5]">Incremental_PID</a> from pid.o(i.Incremental_PID) referenced 12 times from chassis_control.o(.data)
 <LI><a href="#[6e]">JudgeSystem_Handler</a> from rm_judgesystem.o(i.JudgeSystem_Handler) referenced 2 times from rm_judgesystem.o(.data)
 <LI><a href="#[6d]">JudgeSystem_USART_Receive_DMA</a> from rm_judgesystem.o(i.JudgeSystem_USART_Receive_DMA) referenced 2 times from rm_judgesystem.o(.data)
 <LI><a href="#[53]">LEDGreen_MeanUpdate</a> from rm_judgesystem.o(i.LEDGreen_MeanUpdate) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[50]">LEDOrange_MeanUpdate</a> from rm_judgesystem.o(i.LEDOrange_MeanUpdate) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[52]">LEDPink_MeanUpdate</a> from rm_judgesystem.o(i.LEDPink_MeanUpdate) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[51]">LEDPurple_MeanUpdate</a> from rm_judgesystem.o(i.LEDPurple_MeanUpdate) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[4f]">LEDYellow_MeanUpdate</a> from rm_judgesystem.o(i.LEDYellow_MeanUpdate) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[63]">M2006_getInfo</a> from m2006_motor.o(i.M2006_getInfo) referenced 2 times from m2006_motor.o(.data)
 <LI><a href="#[66]">M3508_Friction_getInfo</a> from m3508_motor.o(i.M3508_Friction_getInfo) referenced 2 times from m3508_motor.o(.data)
 <LI><a href="#[65]">M3508_getInfo</a> from m3508_motor.o(i.M3508_getInfo) referenced 2 times from m3508_motor.o(.data)
 <LI><a href="#[6b]">M6020_Reset</a> from m6020_motor.o(i.M6020_Reset) referenced 2 times from m6020_motor.o(.data)
 <LI><a href="#[69]">M6020_getInfo</a> from m6020_motor.o(i.M6020_getInfo) referenced 2 times from m6020_motor.o(.data)
 <LI><a href="#[6a]">M6020_setTargetAngle</a> from m6020_motor.o(i.M6020_setTargetAngle) referenced 2 times from m6020_motor.o(.data)
 <LI><a href="#[87]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[85]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d1]">OTG_FS_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b8]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d9]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d8]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[db]">OTG_HS_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[da]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4a]">Orange_ShowOn</a> from rm_judgesystem.o(i.Orange_ShowOn) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[8f]">PVD_IRQHandler</a> from stm32f4xx_it.o(i.PVD_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[8c]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4c]">Pink_ShowOn</a> from rm_judgesystem.o(i.Pink_ShowOn) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[1]">Position_PID</a> from pid.o(i.Position_PID) referenced 20 times from chassis_control.o(.data)
 <LI><a href="#[42]">Preserve_temp</a> from imu_compensate.o(i.Preserve_temp) referenced 2 times from imu_compensate.o(.data)
 <LI><a href="#[4b]">Purple_ShowOn</a> from rm_judgesystem.o(i.Purple_ShowOn) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[93]">RCC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b7]">RTC_Alarm_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[91]">RTC_WKUP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[60]">RemoteControl_Output</a> from dr16_remote.o(i.RemoteControl_Output) referenced 2 times from dr16_remote.o(.data)
 <LI><a href="#[41]">RemoteControl_Update</a> from status_update.o(i.RemoteControl_Update) referenced 2 times from status_update.o(.data)
 <LI><a href="#[84]">Reset_Handler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[f5]">RobotControl</a> from task_robotcontrol.o(i.RobotControl) referenced from freertos.o(.constdata)
 <LI><a href="#[37]">Robot_ChangeControlSource</a> from robot_control.o(i.Robot_ChangeControlSource) referenced 2 times from robot_control.o(.data)
 <LI><a href="#[33]">Robot_Disable</a> from robot_control.o(i.Robot_Disable) referenced 2 times from robot_control.o(.data)
 <LI><a href="#[32]">Robot_Enable</a> from robot_control.o(i.Robot_Enable) referenced 2 times from robot_control.o(.data)
 <LI><a href="#[34]">Robot_Reset</a> from robot_control.o(i.Robot_Reset) referenced 2 times from robot_control.o(.data)
 <LI><a href="#[35]">Robot_control</a> from robot_control.o(i.Robot_control) referenced 2 times from robot_control.o(.data)
 <LI><a href="#[36]">Robot_init</a> from robot_control.o(i.Robot_init) referenced 2 times from robot_control.o(.data)
 <LI><a href="#[38]">Robot_setAttackMode</a> from robot_control.o(i.Robot_setAttackMode) referenced 2 times from robot_control.o(.data)
 <LI><a href="#[39]">Robot_setChassisWorkMode</a> from robot_control.o(i.Robot_setChassisWorkMode) referenced 2 times from robot_control.o(.data)
 <LI><a href="#[e4]">SAI1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[7b]">SCCM_MsgProcess</a> from supercapacitor.o(i.SCCM_MsgProcess) referenced 2 times from supercapacitor.o(.data)
 <LI><a href="#[7c]">SCCM_SendMsg</a> from supercapacitor.o(i.SCCM_SendMsg) referenced 2 times from supercapacitor.o(.data)
 <LI><a href="#[bf]">SDIO_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b1]">SPI1_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b2]">SPI2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[c1]">SPI3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[e1]">SPI4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[e2]">SPI5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[e3]">SPI6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[8a]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4d]">ShootLv_Updata</a> from rm_judgesystem.o(i.ShootLv_Updata) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[46]">ShootLv_show</a> from rm_judgesystem.o(i.ShootLv_show) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[3b]">Shoot_Init</a> from shoot.o(i.Shoot_Init) referenced 2 times from shoot.o(.data)
 <LI><a href="#[3d]">Shoot_openCartridge</a> from shoot.o(i.Shoot_openCartridge) referenced 2 times from shoot.o(.data)
 <LI><a href="#[3c]">Shoot_processing</a> from shoot.o(i.Shoot_processing) referenced 2 times from shoot.o(.data)
 <LI><a href="#[3e]">Shoot_setNeedLaunchCount</a> from shoot.o(i.Shoot_setNeedLaunchCount) referenced 2 times from shoot.o(.data)
 <LI><a href="#[44]">Show_CrossHair</a> from rm_judgesystem.o(i.Show_CrossHair) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[7d]">SuperCapacitor_Switch</a> from supercapacitor.o(i.SuperCapacitor_Switch) referenced 2 times from supercapacitor.o(.data)
 <LI><a href="#[8d]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[e7]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f427xx.o(.text)
 <LI><a href="#[90]">TAMP_STAMP_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[a6]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[a9]">TIM1_CC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[a8]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[a7]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[aa]">TIM2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[ab]">TIM3_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[ac]">TIM4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[c0]">TIM5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[c4]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[c5]">TIM7_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b9]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[bc]">TIM8_CC_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[bb]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[ba]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[f0]">Test</a> from task_datascope.o(i.Test) referenced from freertos.o(.constdata)
 <LI><a href="#[c2]">UART4_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[c3]">UART5_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[df]">UART7_IRQHandler</a> from stm32f4xx_it.o(i.UART7_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[e0]">UART8_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b3]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b4]">USART2_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[b5]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[d5]">USART6_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[81]">Updata_Hand_Euler_Gyro_Data</a> from dji_c_imu.o(i.Updata_Hand_Euler_Gyro_Data) referenced 2 times from dji_c_imu.o(.data)
 <LI><a href="#[1f]">Update_VisionTarget</a> from control_vision.o(i.Update_VisionTarget) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[89]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[4]">Vision_AutoTracPID</a> from pid.o(i.Vision_AutoTracPID) referenced 2 times from chassis_control.o(.data)
 <LI><a href="#[28]">Vision_CP</a> from control_vision.o(i.Vision_CP) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[22]">Vision_Handler</a> from control_vision.o(i.Vision_Handler) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[21]">Vision_ID_Init</a> from control_vision.o(i.Vision_ID_Init) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[1e]">Vision_Init</a> from control_vision.o(i.Vision_Init) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[10]">Vision_PITCHIPID</a> from pid.o(i.Vision_PITCHIPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[f]">Vision_PITCHOPID</a> from pid.o(i.Vision_PITCHOPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[24]">Vision_SendBufFunction</a> from control_vision.o(i.Vision_SendBufFunction) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[23]">Vision_USART_Receive_DMA</a> from control_vision.o(i.Vision_USART_Receive_DMA) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[e]">Vision_YAWIPID</a> from pid.o(i.Vision_YAWIPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[d]">Vision_YAWOPID</a> from pid.o(i.Vision_YAWOPID) referenced 2 times from cloud_control.o(.data)
 <LI><a href="#[20]">Vision_processing</a> from control_vision.o(i.Vision_processing) referenced 2 times from control_vision.o(.data)
 <LI><a href="#[8e]">WWDG_IRQHandler</a> from startup_stm32f427xx.o(.text) referenced from startup_stm32f427xx.o(RESET)
 <LI><a href="#[48]">Yellow_ShowOn</a> from rm_judgesystem.o(i.Yellow_ShowOn) referenced 2 times from rmclient_ui.o(.data)
 <LI><a href="#[e8]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f427xx.o(.text)
 <LI><a href="#[e9]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[e6]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[eb]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[ea]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e8]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(.text)
</UL>
<P><STRONG><a name="[275]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[f6]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[276]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[277]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[278]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[279]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[27a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[8a]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[271]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[270]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8c]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[26a]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[84]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f427xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[23e]"></a>arm_mat_add_f32</STRONG> (Thumb, 264 bytes, Stack size 12 bytes, arm_mat_add_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_calc
</UL>

<P><STRONG><a name="[23c]"></a>arm_mat_init_f32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_mat_init_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_calc
</UL>

<P><STRONG><a name="[23f]"></a>arm_mat_inverse_f32</STRONG> (Thumb, 1328 bytes, Stack size 60 bytes, arm_mat_inverse_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = arm_mat_inverse_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_calc
</UL>

<P><STRONG><a name="[23d]"></a>arm_mat_mult_f32</STRONG> (Thumb, 312 bytes, Stack size 44 bytes, arm_mat_mult_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_calc
</UL>

<P><STRONG><a name="[240]"></a>arm_mat_sub_f32</STRONG> (Thumb, 264 bytes, Stack size 12 bytes, arm_mat_sub_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arm_mat_sub_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_calc
</UL>

<P><STRONG><a name="[241]"></a>arm_mat_trans_f32</STRONG> (Thumb, 276 bytes, Stack size 44 bytes, arm_mat_trans_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = arm_mat_trans_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_init
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Updata
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_MeanUpdate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_MeanUpdate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_MeanUpdate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_MeanUpdate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_MeanUpdate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_DistanceFrame
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_EnergyUpdata
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_CrossHair
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_ShootLevel
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_Mean
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_Mean
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_Mean
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_Mean
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Mean
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_GetMessage
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_CrossHair
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capacitance_Value
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Energy
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Receives
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Receives
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxMessage_Export_Date
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_device_init
</UL>

<P><STRONG><a name="[27b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[27c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Send_FloatData_2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Send_FloatData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANO_Send_Data_V4
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[135]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_EnergyUpdata
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capacitance_Value
</UL>

<P><STRONG><a name="[130]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_MeanUpdate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_MeanUpdate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_MeanUpdate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_MeanUpdate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_MeanUpdate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_into_char
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_ShootLevel
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_Mean
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_Mean
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_Mean
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_Mean
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Mean
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Energy
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omnidirectional_Formula
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_LimUpdate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_attitude_update
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omnidirectional_Formula
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountLaunchBullet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_LimUpdate
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Follow
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omnidirectional_Formula
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_getMaxShootAmount
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountLaunchBullet
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS_Calculate
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_PC_Update
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_attitude_update
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Follow
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS_Calculate
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[107]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassisFollow_PID
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_getMaxShootAmount
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountLaunchBullet
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_PC_Update
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_quaternion
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS_Calculate
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_getMaxShootAmount
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS_Calculate
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omnidirectional_Formula
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Follow
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassisFollow_PID
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountLaunchBullet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_LimUpdate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_attitude_update
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_ahrs_update
</UL>

<P><STRONG><a name="[27f]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassisFollow_PID
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountLaunchBullet
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_quaternion
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omnidirectional_Formula
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Follow
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_LimUpdate
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_PC_Update
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_attitude_update
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_ahrs_update
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[281]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[282]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[283]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[285]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[101]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[22f]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[286]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f7]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[287]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>ALL_Send</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, freertos.o(i.ALL_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ALL_Send &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserDefined_UI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>ANO_Send_Data_V4</STRONG> (Thumb, 594 bytes, Stack size 80 bytes, ano.o(i.ANO_Send_Data_V4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ANO_Send_Data_V4
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ano.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>ANO_Send_FloatData</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, ano.o(i.ANO_Send_FloatData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ANO_Send_FloatData
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ano.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>ANO_Send_FloatData_2</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, ano.o(i.ANO_Send_FloatData_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ANO_Send_FloatData_2
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ano.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>AllCanSend</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, task_cansend.o(i.AllCanSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AllCanSend &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_AddTxMessage
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>All_Init</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, freertos.o(i.All_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = All_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Config
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>Append_CRC16_Check_Sum</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rm_judgesystem.o(i.Append_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Append_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DeleteAll
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Updata
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_MeanUpdate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_MeanUpdate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_MeanUpdate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_MeanUpdate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_MeanUpdate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_DistanceFrame
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_EnergyUpdata
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_CrossHair
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_ShootLevel
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_Mean
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_Mean
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_Mean
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_Mean
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Mean
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_CrossHair
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capacitance_Value
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Energy
</UL>

<P><STRONG><a name="[121]"></a>Append_CRC8_Check_Sum</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rm_judgesystem.o(i.Append_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Append_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DeleteAll
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Updata
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_MeanUpdate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_MeanUpdate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_MeanUpdate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_MeanUpdate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_MeanUpdate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_DistanceFrame
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_EnergyUpdata
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_CrossHair
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_ShootLevel
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_Mean
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_Mean
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_Mean
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_Mean
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Mean
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_CrossHair
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capacitance_Value
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Energy
</UL>

<P><STRONG><a name="[88]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>Buzzer_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, devicesmonitor.o(i.Buzzer_On))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevicesMonitor_Alert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicesmonitor.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN2_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN_0x1FF_SendData</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, monitor_rm_can.o(i.CAN_0x1FF_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_0x1FF_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor_rm_can.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>CAN_0x200_SendData</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, monitor_rm_can.o(i.CAN_0x200_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_0x200_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor_rm_can.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>CAN_0x2FF_SendData</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, monitor_rm_can.o(i.CAN_0x2FF_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_0x2FF_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor_rm_can.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>CAN_0x601_SendData</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, monitor_rm_can.o(i.CAN_0x601_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_0x601_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor_rm_can.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>CAN_IT_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_can.o(i.CAN_IT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_IT_Init &rArr; CAN_FILTER_Init &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FILTER_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_can.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>CAN_RxMessage_Export_Date</STRONG> (Thumb, 146 bytes, Stack size 96 bytes, bsp_can.o(i.CAN_RxMessage_Export_Date))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CAN_RxMessage_Export_Date &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_GetRxMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_can.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>CAN_SendControl</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, robot_control.o(i.CAN_SendControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_SendControl
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot_control.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>CAN_SendData</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, bsp_can.o(i.CAN_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CAN_SendData &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_can.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>CIMU_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dji_c_imu.o(i.CIMU_Reset))
<BR>[Address Reference Count : 1]<UL><LI> dji_c_imu.o(.data)
</UL>
<P><STRONG><a name="[173]"></a>Calibration_Shoot</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, dr16_remote.o(i.Calibration_Shoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Calibration_Shoot
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FricRead
</UL>

<P><STRONG><a name="[ed]"></a>Can1Receives</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, task_canmsg.o(i.Can1Receives))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Can1Receives &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>Can2Receives</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, task_canmsg.o(i.Can2Receives))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Can2Receives &rArr; xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>CapEnergy_Show</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rm_judgesystem.o(i.CapEnergy_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CapEnergy_Show &rArr; Capacitance_Value &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capacitance_Value
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Energy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[12e]"></a>Cap_Energy</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Cap_Energy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Cap_Energy &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapEnergy_Show
</UL>

<P><STRONG><a name="[4e]"></a>Cap_EnergyUpdata</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, rm_judgesystem.o(i.Cap_EnergyUpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Cap_EnergyUpdata &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVision_CP
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_into_char
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[12d]"></a>Capacitance_Value</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Capacitance_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Capacitance_Value &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_into_char
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CapEnergy_Show
</UL>

<P><STRONG><a name="[45]"></a>Car_DistanceFrame</STRONG> (Thumb, 806 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Car_DistanceFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Car_DistanceFrame &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>ChassisCapControl</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, chassis_control.o(i.ChassisCapControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChassisCapControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_control.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Chassis_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, chassis_control.o(i.Chassis_Init))
<BR>[Address Reference Count : 1]<UL><LI> chassis_control.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Chassis_processing</STRONG> (Thumb, 1428 bytes, Stack size 64 bytes, chassis_control.o(i.Chassis_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Chassis_processing &rArr; Follow &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYSpeedLimit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Twister_processing
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omnidirectional_Formula
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MecanumCalculate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Follow
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttachWorkMode
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_IIRLPF
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAMP_float
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_IncrementalPIDData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLimit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_ReversefollowTransition
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_ReversefollowTime
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BIG_WHEELEndFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_control.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>Check_CAN</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bsp_can.o(i.Check_CAN))
<BR>[Address Reference Count : 1]<UL><LI> bsp_can.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>Check_DJIIMU</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dji_imu.o(i.Check_DJIIMU))
<BR>[Address Reference Count : 1]<UL><LI> dji_imu.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>Check_DJI_C_IMU</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dji_c_imu.o(i.Check_DJI_C_IMU))
<BR>[Address Reference Count : 1]<UL><LI> dji_c_imu.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>Check_DR16</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dr16_remote.o(i.Check_DR16))
<BR>[Address Reference Count : 1]<UL><LI> dr16_remote.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>Check_FrictionM3508</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, m3508_motor.o(i.Check_FrictionM3508))
<BR>[Address Reference Count : 1]<UL><LI> m3508_motor.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>Check_GyIMU</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wolf_gyimu.o(i.Check_GyIMU))
<BR>[Address Reference Count : 1]<UL><LI> wolf_gyimu.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>Check_Judge</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rm_judgesystem.o(i.Check_Judge))
<BR>[Address Reference Count : 1]<UL><LI> rm_judgesystem.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>Check_M2006</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, m2006_motor.o(i.Check_M2006))
<BR>[Address Reference Count : 1]<UL><LI> m2006_motor.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>Check_M6020</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, m6020_motor.o(i.Check_M6020))
<BR>[Address Reference Count : 1]<UL><LI> m6020_motor.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>Check_SuperCapacitor</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, supercapacitor.o(i.Check_SuperCapacitor))
<BR>[Address Reference Count : 1]<UL><LI> supercapacitor.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>Check_Vision</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, control_vision.o(i.Check_Vision))
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>Check_WheelM3508</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, m3508_motor.o(i.Check_WheelM3508))
<BR>[Address Reference Count : 1]<UL><LI> m3508_motor.o(.data)
</UL>
<P><STRONG><a name="[21b]"></a>Checksum_CRC8</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, crc.o(i.Checksum_CRC8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Checksum_CRC8
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_DataReceive
</UL>

<P><STRONG><a name="[2]"></a>ClassisFollow_PID</STRONG> (Thumb, 706 bytes, Stack size 40 bytes, pid.o(i.ClassisFollow_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ClassisFollow_PID &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_control.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>ClassisTwister_PID</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, pid.o(i.ClassisTwister_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClassisTwister_PID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_control.o(.data)
</UL>
<P><STRONG><a name="[142]"></a>Clear_BIG_WHEELEndFlag</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, chassis_control.o(i.Clear_BIG_WHEELEndFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Clear_BIG_WHEELEndFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BIG_WHEELEndTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[148]"></a>Clear_BIG_WHEELEndTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis_control.o(i.Clear_BIG_WHEELEndTime))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_BIG_WHEELEndFlag
</UL>

<P><STRONG><a name="[136]"></a>Clear_IncrementalPIDData</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, pid.o(i.Clear_IncrementalPIDData))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[14b]"></a>Clear_PositionPIDData</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, pid.o(i.Clear_PositionPIDData))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWMotorVisionPID
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWMotorNormalPID
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWIMUVisionPID
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWIMUNormalPID
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHMotorVisionPID
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHMotorNormalPID
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHIMUVisionPID
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHIMUNormalPID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_ClearMoterPIDData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_ClearIMUPIDData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_VisionFusion
</UL>

<P><STRONG><a name="[141]"></a>Clear_ReversefollowTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis_control.o(i.Clear_ReversefollowTime))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[13f]"></a>Clear_ReversefollowTransition</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, chassis_control.o(i.Clear_ReversefollowTransition))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[14]"></a>Cloud_IMUPITCHIPID</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, pid.o(i.Cloud_IMUPITCHIPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_IMUPITCHIPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Cloud_IMUPITCHOPID</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, pid.o(i.Cloud_IMUPITCHOPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_IMUPITCHOPID
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Cloud_IMUYAWIPID</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, pid.o(i.Cloud_IMUYAWIPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_IMUYAWIPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Cloud_IMUYAWOPID</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, pid.o(i.Cloud_IMUYAWOPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_IMUYAWOPID
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>Cloud_Init</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, cloud_control.o(i.Cloud_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Cloud_Init &rArr; IMU_LimUpdate &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanCreate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_LimUpdate
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_setIMUPosForced
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_IMUEngage
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_IMUEngage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Cloud_PITCHIPID</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, pid.o(i.Cloud_PITCHIPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_PITCHIPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Cloud_PITCHOPID</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, pid.o(i.Cloud_PITCHOPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_PITCHOPID
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>Cloud_VisionIMUPITCHIPID</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, pid.o(i.Cloud_VisionIMUPITCHIPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_VisionIMUPITCHIPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>Cloud_VisionIMUPITCHOPID</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, pid.o(i.Cloud_VisionIMUPITCHOPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_VisionIMUPITCHOPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>Cloud_VisionIMUYAWIPID</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, pid.o(i.Cloud_VisionIMUYAWIPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_VisionIMUYAWIPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>Cloud_VisionIMUYAWOPID</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, pid.o(i.Cloud_VisionIMUYAWOPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_VisionIMUYAWOPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Cloud_YAWIPID</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, pid.o(i.Cloud_YAWIPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_YAWIPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Cloud_YAWOPID</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, pid.o(i.Cloud_YAWOPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Cloud_YAWOPID
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>Cloud_getYawAngleWithCenter</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cloud_control.o(i.Cloud_getYawAngleWithCenter))
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>Cloud_processing_WithIMU</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, cloud_control.o(i.Cloud_processing_WithIMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Cloud_processing_WithIMU &rArr; Cloud_YAWIMUVisionPID &rArr; Cloud_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_IIRLPF
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_setIMUPosForced
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWIMUVisionPID
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWIMUNormalPID
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHIMUVisionPID
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHIMUNormalPID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_ClearMoterPIDData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_ClearIMUPIDData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_AngleLimit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>Cloud_processing_WithoutIMU</STRONG> (Thumb, 542 bytes, Stack size 16 bytes, cloud_control.o(i.Cloud_processing_WithoutIMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Cloud_processing_WithoutIMU &rArr; Cloud_YAWMotorVisionPID &rArr; Cloud_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_IIRLPF
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_setIMUPosForced
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWMotorVisionPID
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWMotorNormalPID
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHMotorVisionPID
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHMotorNormalPID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_ClearMoterPIDData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_ClearIMUPIDData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_AngleLimit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[206]"></a>CountReset</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, speedramp.o(i.CountReset))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_PC_Update
</UL>

<P><STRONG><a name="[7f]"></a>DJI_C_Euler_getInfo</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, dji_c_imu.o(i.DJI_C_Euler_getInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DJI_C_Euler_getInfo &rArr; Get_FPS &rArr; FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FPS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_c_imu.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>DJI_C_Gyro_getInfo</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dji_c_imu.o(i.DJI_C_Gyro_getInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DJI_C_Gyro_getInfo &rArr; Get_FPS &rArr; FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FPS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_c_imu.o(.data)
</UL>
<P><STRONG><a name="[162]"></a>DJI_IMUReadOffset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, flash_store.o(i.DJI_IMUReadOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DJI_IMUReadOffset &rArr; MEM_If_Read_FS &rArr; MEM_If_Init_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Read_FS
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>DJI_IMU_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dji_imu.o(i.DJI_IMU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DJI_IMU_Init &rArr; mpu_device_init &rArr; ist8310_init &rArr; mpu_master_i2c_auto_read_config &rArr; mpu_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_quaternion
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_imu.o(.data)
</UL>
<P><STRONG><a name="[f3]"></a>DJI_OLED</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task_oled.o(i.DJI_OLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DJI_OLED &rArr; Get_FPS &rArr; FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FPS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA_USART_Receive_IT_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_usart.o(i.DMA_USART_Receive_IT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_USART_Receive_IT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>DMA_USART_Send_IT_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_usart.o(i.DMA_USART_Send_IT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_USART_Send_IT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_usart.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>DR16_DataCheck</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, dr16_remote.o(i.DR16_DataCheck))
<BR>[Address Reference Count : 1]<UL><LI> dr16_remote.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>DR16_Handler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dr16_remote.o(i.DR16_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DR16_Handler &rArr; DR16_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DR16_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dr16_remote.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>DR16_USART_Receive_DMA</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dr16_remote.o(i.DR16_USART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DR16_USART_Receive_DMA &rArr; USART_Receive_DMA_NO_IT &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_DMA_NO_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dr16_remote.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>Detect</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, task_devicesmonitor.o(i.Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Detect &rArr; Get_FPS &rArr; FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FPS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>DevicesInit</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, devicesmonitor.o(i.DevicesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DevicesInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicesmonitor.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>DevicesMonitor_Alert</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, devicesmonitor.o(i.DevicesMonitor_Alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DevicesMonitor_Alert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_On
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicesmonitor.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>DevicesMonitor_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, devicesmonitor.o(i.DevicesMonitor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DevicesMonitor_Init &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicesmonitor.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>DevicesMonitor_update</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, devicesmonitor.o(i.DevicesMonitor_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DevicesMonitor_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicesmonitor.o(.data)
</UL>
<P><STRONG><a name="[1c8]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI5_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[16b]"></a>Ex_CrossHair</STRONG> (Thumb, 786 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Ex_CrossHair))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ex_CrossHair &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_CrossHair
</UL>

<P><STRONG><a name="[18b]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[18c]"></a>FLASH_FlushCaches</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[16c]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Write_FS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Erase_FS
</UL>

<P><STRONG><a name="[143]"></a>Filter_IIRLPF</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, user_filter.o(i.Filter_IIRLPF))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithoutIMU
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithIMU
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_PC_Update
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DataCopy
</UL>

<P><STRONG><a name="[ef]"></a>Fixed_Sampling</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, task_sampling.o(i.Fixed_Sampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Fixed_Sampling &rArr; Get_FPS &rArr; FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FPS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>FricRead</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, shoot.o(i.FricRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FricRead &rArr; Shoot_EraseOffset &rArr; MEM_If_Erase_FS &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_ReadOffset
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_EraseOffset
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calibration_Shoot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shoot.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>FricWrite</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shoot.o(i.FricWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FricWrite &rArr; Shoot_WriteOffset &rArr; MEM_If_Write_FS &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_WriteOffset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shoot.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>GY6050_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wolf_gyimu.o(i.GY6050_Init))
<BR>[Address Reference Count : 1]<UL><LI> wolf_gyimu.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>GY6050_PitErr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wolf_gyimu.o(i.GY6050_PitErr))
<BR>[Address Reference Count : 1]<UL><LI> wolf_gyimu.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>GY6050_getInfo</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, wolf_gyimu.o(i.GY6050_getInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GY6050_getInfo &rArr; Get_FPS &rArr; FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FPS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wolf_gyimu.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>GetKeyMouseAction</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, dr16_remote.o(i.GetKeyMouseAction))
<BR>[Address Reference Count : 1]<UL><LI> dr16_remote.o(.data)
</UL>
<P><STRONG><a name="[15a]"></a>GetVisionAngle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cloud_control.o(i.GetVisionAngle))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
</UL>

<P><STRONG><a name="[25]"></a>GetVisionDiscMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, control_vision.o(i.GetVisionDiscMode))
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>GetVisionHitMode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, control_vision.o(i.GetVisionHitMode))
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[133]"></a>GetVision_CP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, control_vision.o(i.GetVision_CP))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_EnergyUpdata
</UL>

<P><STRONG><a name="[120]"></a>Get_CRC16_Check_Sum</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, rm_judgesystem.o(i.Get_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>

<P><STRONG><a name="[122]"></a>Get_CRC8_Check_Sum</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, rm_judgesystem.o(i.Get_CRC8_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
</UL>

<P><STRONG><a name="[161]"></a>Get_FPS</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, devicesmonitor.o(i.Get_FPS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Get_FPS &rArr; FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FPS_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed_Sampling
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_OLED
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_control
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_DataReceive
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_C_Gyro_getInfo
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_C_Euler_getInfo
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY6050_getInfo
</UL>

<P><STRONG><a name="[179]"></a>Get_RandomNumbers_Range</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, user_rng.o(i.Get_RandomNumbers_Range))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_RandomNumbers_Range &rArr; HAL_RNG_GetRandomNumber &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GetRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYSpeedLimit
</UL>

<P><STRONG><a name="[49]"></a>Green_ShowOn</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Green_ShowOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Green_ShowOn &rArr; LEDGreen_Mean &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Mean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[1ea]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[17c]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[17d]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[116]"></a>HAL_CAN_AddTxMessage</STRONG> (Thumb, 342 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_AddTxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_AddTxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllCanSend
</UL>

<P><STRONG><a name="[127]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FILTER_Init
</UL>

<P><STRONG><a name="[129]"></a>HAL_CAN_GetRxMessage</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxMessage_Export_Date
</UL>

<P><STRONG><a name="[180]"></a>HAL_CAN_Init</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[181]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, can.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_CAN_Start</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IT_Init
</UL>

<P><STRONG><a name="[184]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[187]"></a>HAL_DMA_Start</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_DMA_NO_IT
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_DMA_NO_IT
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_DMA_NO_IT
</UL>

<P><STRONG><a name="[119]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_master_i2c_auto_read_config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_device_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist_reg_write_by_mpu
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist_reg_read_by_mpu
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>

<P><STRONG><a name="[189]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Write_FS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Erase_FS
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_DeInit_FS
</UL>

<P><STRONG><a name="[18d]"></a>HAL_FLASH_Program</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Write_FS
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Init_FS
</UL>

<P><STRONG><a name="[17f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LASER_Set
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_processing
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_bytes
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_byte
</UL>

<P><STRONG><a name="[16d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Start
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_ahrs_update
</UL>

<P><STRONG><a name="[192]"></a>HAL_IWDG_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[169]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[193]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[195]"></a>HAL_InitTick</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[183]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Config
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[182]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Config
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[194]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[19e]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVDCallback
</UL>

<P><STRONG><a name="[200]"></a>HAL_PWR_ConfigPVD</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_ConfigPVD))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Config
</UL>

<P><STRONG><a name="[201]"></a>HAL_PWR_EnablePVD</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_EnablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Config
</UL>

<P><STRONG><a name="[19d]"></a>HAL_PWR_PVDCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pvd.o(i.HAL_PWR_PVDCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_PVDCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVD_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>HAL_PWR_PVD_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWR_PVD_IRQHandler &rArr; HAL_PWR_PVDCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVDCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[197]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[198]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1152 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GetRandomNumber
</UL>

<P><STRONG><a name="[17a]"></a>HAL_RNG_GetRandomNumber</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_GetRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_GetRandomNumber &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RandomNumbers_Range
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_RNG_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rng.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI5_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_bytes
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_byte
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevicesMonitor_Init
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_UART_MspInit</STRONG> (Thumb, 698 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_UART_Transmit</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DeleteAll
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVisionData
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Updata
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_MeanUpdate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_MeanUpdate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_MeanUpdate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_MeanUpdate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_MeanUpdate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_DistanceFrame
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_EnergyUpdata
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_CrossHair
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_ShootLevel
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_Mean
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_Mean
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_Mean
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_Mean
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Mean
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_CrossHair
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capacitance_Value
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Energy
</UL>

<P><STRONG><a name="[77]"></a>HAL_imu_ahrs_update</STRONG> (Thumb, 1830 bytes, Stack size 144 bytes, dji_imu.o(i.HAL_imu_ahrs_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_imu_ahrs_update &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_imu.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>HAL_imu_attitude_update</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, dji_imu.o(i.HAL_imu_attitude_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HAL_imu_attitude_update &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500_DataCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_imu.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>HAL_mpu_get_data</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, dji_imu.o(i.HAL_mpu_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_mpu_get_data &rArr; ist8310_get_data &rArr; mpu_read_bytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_bytes
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_get_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dji_imu.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IMUData_chance</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, cloud_control.o(i.IMUData_chance))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IMUData_chance &rArr; C_IMUEngage
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_setIMUPosForced
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_IMUEngage
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_IMUEngage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>IMU_GetData_Compensate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, imu_compensate.o(i.IMU_GetData_Compensate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IMU_GetData_Compensate &rArr; IMU_temp_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_temp_Control
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Update_IMU_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> imu_compensate.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>IMU_Reset</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, dji_imu.o(i.IMU_Reset))
<BR>[Address Reference Count : 1]<UL><LI> dji_imu.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>IMU_processing</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wolf_gyimu.o(i.IMU_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IMU_processing
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUCloud_processing
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUChassis_processing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wolf_gyimu.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Incremental_PID</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, pid.o(i.Incremental_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Incremental_PID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> chassis_control.o(.data)
<LI> shoot.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>JudgeSystem_Handler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rm_judgesystem.o(i.JudgeSystem_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = JudgeSystem_Handler &rArr; Judge_GetMessage &rArr; Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_GetMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rm_judgesystem.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>JudgeSystem_USART_Receive_DMA</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rm_judgesystem.o(i.JudgeSystem_USART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = JudgeSystem_USART_Receive_DMA &rArr; USART_Receive_DMA_NO_IT &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_DMA_NO_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rm_judgesystem.o(.data)
</UL>
<P><STRONG><a name="[1d8]"></a>Judge_GetMessage</STRONG> (Thumb, 1088 bytes, Stack size 16 bytes, rm_judgesystem.o(i.Judge_GetMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Judge_GetMessage &rArr; Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSystem_Handler
</UL>

<P><STRONG><a name="[153]"></a>KalmanCreate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, kalman_filter.o(i.KalmanCreate))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Init
</UL>

<P><STRONG><a name="[150]"></a>KalmanFilter</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, kalman_filter.o(i.KalmanFilter))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWOPID
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHOPID
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_IMUYAWOPID
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_IMUPITCHOPID
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_processing
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWMotorNormalPID
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHMotorNormalPID
</UL>

<P><STRONG><a name="[167]"></a>KeyMouseFlag_Update</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, dr16_remote.o(i.KeyMouseFlag_Update))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DR16_Process
</UL>

<P><STRONG><a name="[1db]"></a>LASER_Set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, laser.o(i.LASER_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LASER_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Reset
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Disable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_Update
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteMode_Update
</UL>

<P><STRONG><a name="[17b]"></a>LEDGreen_Mean</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, rm_judgesystem.o(i.LEDGreen_Mean))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEDGreen_Mean &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_ShowOn
</UL>

<P><STRONG><a name="[53]"></a>LEDGreen_MeanUpdate</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, rm_judgesystem.o(i.LEDGreen_MeanUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEDGreen_MeanUpdate &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[1dd]"></a>LEDOrange_Mean</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, rm_judgesystem.o(i.LEDOrange_Mean))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEDOrange_Mean &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Orange_ShowOn
</UL>

<P><STRONG><a name="[50]"></a>LEDOrange_MeanUpdate</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, rm_judgesystem.o(i.LEDOrange_MeanUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEDOrange_MeanUpdate &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[1de]"></a>LEDPink_Mean</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, rm_judgesystem.o(i.LEDPink_Mean))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEDPink_Mean &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pink_ShowOn
</UL>

<P><STRONG><a name="[52]"></a>LEDPink_MeanUpdate</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, rm_judgesystem.o(i.LEDPink_MeanUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEDPink_MeanUpdate &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[1df]"></a>LEDPurple_Mean</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, rm_judgesystem.o(i.LEDPurple_Mean))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEDPurple_Mean &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Purple_ShowOn
</UL>

<P><STRONG><a name="[51]"></a>LEDPurple_MeanUpdate</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, rm_judgesystem.o(i.LEDPurple_MeanUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEDPurple_MeanUpdate &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[1e0]"></a>LEDYellow_Mean</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, rm_judgesystem.o(i.LEDYellow_Mean))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEDYellow_Mean &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yellow_ShowOn
</UL>

<P><STRONG><a name="[4f]"></a>LEDYellow_MeanUpdate</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, rm_judgesystem.o(i.LEDYellow_MeanUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LEDYellow_MeanUpdate &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>M2006_getInfo</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, m2006_motor.o(i.M2006_getInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M2006_getInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m2006_motor.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>M3508_Friction_getInfo</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, m3508_motor.o(i.M3508_Friction_getInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M3508_Friction_getInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3508_motor.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>M3508_getInfo</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, m3508_motor.o(i.M3508_getInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M3508_getInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3508_motor.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>M6020_Reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, m6020_motor.o(i.M6020_Reset))
<BR>[Address Reference Count : 1]<UL><LI> m6020_motor.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>M6020_getInfo</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, m6020_motor.o(i.M6020_getInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M6020_getInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m6020_motor.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>M6020_setTargetAngle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m6020_motor.o(i.M6020_setTargetAngle))
<BR>[Address Reference Count : 1]<UL><LI> m6020_motor.o(.data)
</UL>
<P><STRONG><a name="[1e1]"></a>MEM_If_DeInit_FS</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_store.o(i.MEM_If_DeInit_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MEM_If_DeInit_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Write_FS
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Read_FS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Erase_FS
</UL>

<P><STRONG><a name="[1e3]"></a>MEM_If_Erase_FS</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, flash_store.o(i.MEM_If_Erase_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MEM_If_Erase_FS &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Init_FS
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_DeInit_FS
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSector
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_EraseOffset
</UL>

<P><STRONG><a name="[1e4]"></a>MEM_If_Init_FS</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash_store.o(i.MEM_If_Init_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MEM_If_Init_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Write_FS
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Read_FS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Erase_FS
</UL>

<P><STRONG><a name="[163]"></a>MEM_If_Read_FS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, flash_store.o(i.MEM_If_Read_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MEM_If_Read_FS &rArr; MEM_If_Init_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Init_FS
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_DeInit_FS
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_IMUReadOffset
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_ReadOffset
</UL>

<P><STRONG><a name="[1e8]"></a>MEM_If_Write_FS</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, flash_store.o(i.MEM_If_Write_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MEM_If_Write_FS &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadWord
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Init_FS
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_DeInit_FS
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSector
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_WriteOffset
</UL>

<P><STRONG><a name="[1e9]"></a>MX_ADC1_Init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1eb]"></a>MX_CAN1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ec]"></a>MX_CAN2_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(i.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>MX_DMA_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 292 bytes, Stack size 304 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f0]"></a>MX_GPIO_Init</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f1]"></a>MX_IWDG_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, iwdg.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f2]"></a>MX_RNG_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rng.o(i.MX_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_RNG_Init &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f3]"></a>MX_SPI1_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f4]"></a>MX_SPI5_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.MX_SPI5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SPI5_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f5]"></a>MX_TIM12_Init</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, tim.o(i.MX_TIM12_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_TIM12_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f6]"></a>MX_TIM3_Init</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f8]"></a>MX_TIM5_Init</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, tim.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f9]"></a>MX_UART7_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_UART7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART7_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fa]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fb]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fc]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>Orange_ShowOn</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Orange_ShowOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Orange_ShowOn &rArr; LEDOrange_Mean &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_Mean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[117]"></a>PVD_Config</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pvd.o(i.PVD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PVD_Config &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnablePVD
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_ConfigPVD
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[8f]"></a>PVD_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PVD_IRQHandler &rArr; HAL_PWR_PVD_IRQHandler &rArr; HAL_PWR_PVDCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_PVD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Pink_ShowOn</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Pink_ShowOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Pink_ShowOn &rArr; LEDPink_Mean &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_Mean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>Position_PID</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, pid.o(i.Position_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Position_PID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_ReloaderCal
</UL>
<BR>[Address Reference Count : 4]<UL><LI> imu_compensate.o(.data)
<LI> chassis_control.o(.data)
<LI> cloud_control.o(.data)
<LI> shoot.o(.data)
</UL>
<P><STRONG><a name="[114]"></a>Position_PIDInit</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, pid.o(i.Position_PIDInit))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_IMUEngage
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;A_IMUEngage
</UL>

<P><STRONG><a name="[145]"></a>PowerLimit</STRONG> (Thumb, 162 bytes, Stack size 36 bytes, powerlimit.o(i.PowerLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PowerLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLimit_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[204]"></a>PowerLimit_Calculate</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, powerlimit.o(i.PowerLimit_Calculate))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerLimit
</UL>

<P><STRONG><a name="[42]"></a>Preserve_temp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, imu_compensate.o(i.Preserve_temp))
<BR>[Address Reference Count : 1]<UL><LI> imu_compensate.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>Purple_ShowOn</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Purple_ShowOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Purple_ShowOn &rArr; LEDPurple_Mean &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_Mean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[13a]"></a>RAMP_float</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, speedramp.o(i.RAMP_float))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[60]"></a>RemoteControl_Output</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, dr16_remote.o(i.RemoteControl_Output))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DR16_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dr16_remote.o(.data)
</UL>
<P><STRONG><a name="[205]"></a>RemoteControl_PC_Update</STRONG> (Thumb, 1714 bytes, Stack size 24 bytes, status_update.o(i.RemoteControl_PC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RemoteControl_PC_Update &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_IIRLPF
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedRampCalc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountReset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_Update
</UL>

<P><STRONG><a name="[209]"></a>RemoteControl_RC_Update</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, status_update.o(i.RemoteControl_RC_Update))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_Update
</UL>

<P><STRONG><a name="[41]"></a>RemoteControl_Update</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, status_update.o(i.RemoteControl_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RemoteControl_Update &rArr; RemoteControl_PC_Update &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LASER_Set
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_RC_Update
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_PC_Update
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteMode_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> status_update.o(.data)
</UL>
<P><STRONG><a name="[f5]"></a>RobotControl</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, task_robotcontrol.o(i.RobotControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RobotControl &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>Robot_ChangeControlSource</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, robot_control.o(i.Robot_ChangeControlSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Robot_ChangeControlSource &rArr; Robot_Reset &rArr; LASER_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot_control.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>Robot_Disable</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, robot_control.o(i.Robot_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Robot_Disable &rArr; LASER_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LASER_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot_control.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>Robot_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, robot_control.o(i.Robot_Enable))
<BR>[Address Reference Count : 1]<UL><LI> robot_control.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>Robot_Reset</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, robot_control.o(i.Robot_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Robot_Reset &rArr; LASER_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LASER_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_ChangeControlSource
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot_control.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>Robot_control</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, robot_control.o(i.Robot_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Robot_control &rArr; Get_FPS &rArr; FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendControl
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_control
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_control
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FPS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot_control.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>Robot_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, robot_control.o(i.Robot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Robot_init &rArr; UI_DeleteAll &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DeleteAll
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LASER_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot_control.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>Robot_setAttackMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, robot_control.o(i.Robot_setAttackMode))
<BR>[Address Reference Count : 1]<UL><LI> robot_control.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>Robot_setChassisWorkMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, robot_control.o(i.Robot_setChassisWorkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Robot_setChassisWorkMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> robot_control.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>SCCM_MsgProcess</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, supercapacitor.o(i.SCCM_MsgProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCCM_MsgProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> supercapacitor.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>SCCM_SendMsg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, supercapacitor.o(i.SCCM_SendMsg))
<BR>[Address Reference Count : 1]<UL><LI> supercapacitor.o(.data)
</UL>
<P><STRONG><a name="[1e5]"></a>STMFLASH_ReadWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash_store.o(i.STMFLASH_ReadWord))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Write_FS
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Read_FS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Erase_FS
</UL>

<P><STRONG><a name="[20f]"></a>ShootLv_Init</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, rm_judgesystem.o(i.ShootLv_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ShootLv_Init &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_show
</UL>

<P><STRONG><a name="[4d]"></a>ShootLv_Updata</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, rm_judgesystem.o(i.ShootLv_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ShootLv_Updata &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_into_char
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>ShootLv_show</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rm_judgesystem.o(i.ShootLv_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ShootLv_show &rArr; Show_ShootLevel &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_ShootLevel
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[174]"></a>Shoot_EraseOffset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash_store.o(i.Shoot_EraseOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Shoot_EraseOffset &rArr; MEM_If_Erase_FS &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Erase_FS
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FricRead
</UL>

<P><STRONG><a name="[3b]"></a>Shoot_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, shoot.o(i.Shoot_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Shoot_Init &rArr; Shoot_setFricOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_setFricOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shoot.o(.data)
</UL>
<P><STRONG><a name="[172]"></a>Shoot_ReadOffset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, flash_store.o(i.Shoot_ReadOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Shoot_ReadOffset &rArr; MEM_If_Read_FS &rArr; MEM_If_Init_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Read_FS
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FricRead
</UL>

<P><STRONG><a name="[175]"></a>Shoot_WriteOffset</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, flash_store.o(i.Shoot_WriteOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Shoot_WriteOffset &rArr; MEM_If_Write_FS &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Write_FS
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FricWrite
</UL>

<P><STRONG><a name="[3d]"></a>Shoot_openCartridge</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, shoot.o(i.Shoot_openCartridge))
<BR>[Address Reference Count : 1]<UL><LI> shoot.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>Shoot_processing</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, shoot.o(i.Shoot_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Shoot_processing &rArr; Manual_Attack_process &rArr; Shoot_HeatLimitation &rArr; Shoot_getMaxShootAmount &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleAttack_process
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PillReload_processing
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_Attack_process
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_processing
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConAttack_process
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAttack_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shoot.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>Shoot_setNeedLaunchCount</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, shoot.o(i.Shoot_setNeedLaunchCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Shoot_setNeedLaunchCount
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPill
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleAttack_process
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_Attack_process
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConAttack_process
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAttack_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shoot.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>Show_CrossHair</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Show_CrossHair))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Show_CrossHair &rArr; Standard_CrossHair &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_CrossHair
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_CrossHair
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[210]"></a>Show_ShootLevel</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Show_ShootLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Show_ShootLevel &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_show
</UL>

<P><STRONG><a name="[207]"></a>SpeedRampCalc</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, speedramp.o(i.SpeedRampCalc))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_setFricOutput
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_PC_Update
</UL>

<P><STRONG><a name="[216]"></a>Standard_CrossHair</STRONG> (Thumb, 806 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Standard_CrossHair))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Standard_CrossHair &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_CrossHair
</UL>

<P><STRONG><a name="[7d]"></a>SuperCapacitor_Switch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, supercapacitor.o(i.SuperCapacitor_Switch))
<BR>[Address Reference Count : 1]<UL><LI> supercapacitor.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[218]"></a>SystemClock_Config</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[1ad]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1c3]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[1af]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1be]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[159]"></a>Target_Speed_Calc</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, cloud_control.o(i.Target_Speed_Calc))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
</UL>

<P><STRONG><a name="[f0]"></a>Test</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, task_datascope.o(i.Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Test &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>UART7_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[20c]"></a>UI_DeleteAll</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, rm_judgesystem.o(i.UI_DeleteAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UI_DeleteAll &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_init
</UL>

<P><STRONG><a name="[b3]"></a>USART1_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>USART3_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>Updata_Hand_Euler_Gyro_Data</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, dji_c_imu.o(i.Updata_Hand_Euler_Gyro_Data))
<BR>[Address Reference Count : 1]<UL><LI> dji_c_imu.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>Update_VisionTarget</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, control_vision.o(i.Update_VisionTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Update_VisionTarget &rArr; SendVisionData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendVisionData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f427xx.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>UserDefined_UI</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rmclient_ui.o(i.UserDefined_UI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserDefined_UI
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Send
</UL>

<P><STRONG><a name="[1da]"></a>Verify_CRC16_Check_Sum</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rm_judgesystem.o(i.Verify_CRC16_Check_Sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_GetMessage
</UL>

<P><STRONG><a name="[4]"></a>Vision_AutoTracPID</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, pid.o(i.Vision_AutoTracPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vision_AutoTracPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_control.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>Vision_CP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, control_vision.o(i.Vision_CP))
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[21a]"></a>Vision_DataReceive</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, control_vision.o(i.Vision_DataReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Vision_DataReceive &rArr; Get_FPS &rArr; FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum_CRC8
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FPS
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Handler
</UL>

<P><STRONG><a name="[22]"></a>Vision_Handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, control_vision.o(i.Vision_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Vision_Handler &rArr; Vision_DataReceive &rArr; Get_FPS &rArr; FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_DataReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>Vision_ID_Init</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, control_vision.o(i.Vision_ID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vision_ID_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_I_T_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>Vision_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, control_vision.o(i.Vision_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vision_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Vision_PITCHIPID</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, pid.o(i.Vision_PITCHIPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vision_PITCHIPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Vision_PITCHOPID</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, pid.o(i.Vision_PITCHOPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vision_PITCHOPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>Vision_SendBufFunction</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, control_vision.o(i.Vision_SendBufFunction))
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>Vision_USART_Receive_DMA</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, control_vision.o(i.Vision_USART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Vision_USART_Receive_DMA &rArr; USART_Receive_DMA_NO_IT &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive_DMA_NO_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Vision_YAWIPID</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, pid.o(i.Vision_YAWIPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vision_YAWIPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Vision_YAWOPID</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, pid.o(i.Vision_YAWOPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vision_YAWOPID
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_limit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cloud_control.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>Vision_processing</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, control_vision.o(i.Vision_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vision_processing
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> control_vision.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>Yellow_ShowOn</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rm_judgesystem.o(i.Yellow_ShowOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Yellow_ShowOn &rArr; LEDYellow_Mean &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_Mean
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmclient_ui.o(.data)
</UL>
<P><STRONG><a name="[21d]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[28a]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[235]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_into_char
</UL>

<P><STRONG><a name="[28b]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[28c]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[222]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[1cd]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_attitude_update
</UL>

<P><STRONG><a name="[227]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1cc]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_attitude_update
</UL>

<P><STRONG><a name="[1ff]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omnidirectional_Formula
</UL>

<P><STRONG><a name="[146]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Follow
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassisFollow_PID
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_LimUpdate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_quaternion
</UL>

<P><STRONG><a name="[171]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Follow
</UL>

<P><STRONG><a name="[1fe]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Omnidirectional_Formula
</UL>

<P><STRONG><a name="[1cb]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt_full.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_ahrs_update
</UL>

<P><STRONG><a name="[22a]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[22c]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[224]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[22b]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[22d]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[21f]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[228]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[221]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[22e]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[223]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[28d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[28e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[28f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[220]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[229]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[12f]"></a>determine_ID</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, rm_judgesystem.o(i.determine_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = determine_ID
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_red_or_blue
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DeleteAll
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Updata
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_MeanUpdate
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_MeanUpdate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_MeanUpdate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_MeanUpdate
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_MeanUpdate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_DistanceFrame
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_EnergyUpdata
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_CrossHair
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_ShootLevel
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDYellow_Mean
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPurple_Mean
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDPink_Mean
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOrange_Mean
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDGreen_Mean
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ex_CrossHair
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capacitance_Value
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_Energy
</UL>

<P><STRONG><a name="[225]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[165]"></a>init_quaternion</STRONG> (Thumb, 596 bytes, Stack size 32 bytes, dji_imu.o(i.init_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_quaternion &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_IMU_Init
</UL>

<P><STRONG><a name="[134]"></a>int_into_char</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rm_judgesystem.o(i.int_into_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = int_into_char &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootLv_Updata
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cap_EnergyUpdata
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Capacitance_Value
</UL>

<P><STRONG><a name="[1ca]"></a>inv_sqrt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, dji_imu.o(i.inv_sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_ahrs_update
</UL>

<P><STRONG><a name="[234]"></a>is_red_or_blue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rm_judgesystem.o(i.is_red_or_blue))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_ID
</UL>

<P><STRONG><a name="[14a]"></a>kalman_filter_calc</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, kalman_filter.o(i.kalman_filter_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_VisionFusion
</UL>

<P><STRONG><a name="[152]"></a>kalman_filter_init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, kalman_filter.o(i.kalman_filter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = kalman_filter_init &rArr; arm_mat_trans_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Init
</UL>

<P><STRONG><a name="[e6]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM12_Init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI5_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_IMUReadOffset
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[111]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_OLED
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALL_Send
</UL>

<P><STRONG><a name="[242]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ef]"></a>osMessageCreate</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[11c]"></a>osThreadCreate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[264]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[25d]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[226]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt_full.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[24e]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[26d]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[25e]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[25c]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[250]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[24f]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[11a]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[11e]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[258]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[26f]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[269]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[246]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[16a]"></a>vTaskDelayUntil</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotControl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed_Sampling
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect
</UL>

<P><STRONG><a name="[11d]"></a>vTaskDelete</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[273]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[263]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[26c]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[247]"></a>vTaskStartScheduler</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[265]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[f8]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[26e]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[249]"></a>xQueueGenericCreate</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[248]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[25a]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[12b]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SendData
</UL>

<P><STRONG><a name="[12a]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxMessage_Export_Date
</UL>

<P><STRONG><a name="[115]"></a>xQueueReceive</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Receives
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Receives
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllCanSend
</UL>

<P><STRONG><a name="[274]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[24c]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[24b]"></a>xTaskCreateStatic</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[272]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[124]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RobotControl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fixed_Sampling
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detect
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_Attack_process
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConAttack_process
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAttack_process
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FPS
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_processing
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
</UL>

<P><STRONG><a name="[217]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[257]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[262]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[268]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[17e]"></a>ADC_Init</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[18e]"></a>FLASH_Program_Byte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[191]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[18f]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[190]"></a>FLASH_Program_Word</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[16e]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[18a]"></a>FLASH_MassErase</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[186]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[185]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[188]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>

<P><STRONG><a name="[19b]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[19c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1ab]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[20d]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[1b1]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1bd]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1bf]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1c0]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[1b0]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1b2]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[1c7]"></a>UART_SetConfig</STRONG> (Thumb, 992 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1c9]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[255]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[256]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[259]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[25f]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[260]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[261]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[24d]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[251]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[253]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[254]"></a>prvDeleteTCB</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[eb]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[25b]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[252]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[26b]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[24a]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[266]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[267]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ea]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[147]"></a>abs_limit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pid.o(i.abs_limit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_YAWOPID
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_YAWIPID
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_PITCHOPID
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_PITCHIPID
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_AutoTracPID
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_PID
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Incremental_PID
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWOPID
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWIPID
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionIMUYAWOPID
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionIMUYAWIPID
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionIMUPITCHOPID
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionIMUPITCHIPID
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHOPID
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHIPID
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_IMUYAWOPID
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_IMUYAWIPID
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_IMUPITCHOPID
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_IMUPITCHIPID
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassisTwister_PID
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassisFollow_PID
</UL>

<P><STRONG><a name="[137]"></a>AttachWorkMode</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, chassis_control.o(i.AttachWorkMode))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[170]"></a>ComputeMinOffset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, chassis_control.o(i.ComputeMinOffset))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Twister_processing
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Follow
</UL>

<P><STRONG><a name="[140]"></a>Follow</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, chassis_control.o(i.Follow))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Follow &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMinOffset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[144]"></a>MecanumCalculate</STRONG> (Thumb, 302 bytes, Stack size 20 bytes, chassis_control.o(i.MecanumCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MecanumCalculate
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[139]"></a>Omnidirectional_Formula</STRONG> (Thumb, 334 bytes, Stack size 80 bytes, chassis_control.o(i.Omnidirectional_Formula))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Omnidirectional_Formula &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[13b]"></a>Twister_processing</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, chassis_control.o(i.Twister_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Twister_processing
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMinOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[138]"></a>XYSpeedLimit</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, chassis_control.o(i.XYSpeedLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = XYSpeedLimit &rArr; Get_RandomNumbers_Range &rArr; HAL_RNG_GetRandomNumber &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RandomNumbers_Range
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_processing
</UL>

<P><STRONG><a name="[113]"></a>A_IMUEngage</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, cloud_control.o(i.A_IMUEngage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = A_IMUEngage
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_PIDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUData_chance
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Init
</UL>

<P><STRONG><a name="[12c]"></a>C_IMUEngage</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, cloud_control.o(i.C_IMUEngage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = C_IMUEngage
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_PIDInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUData_chance
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Init
</UL>

<P><STRONG><a name="[149]"></a>Clear_VisionFusion</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cloud_control.o(i.Clear_VisionFusion))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Clear_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_calc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWMotorNormalPID
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWIMUNormalPID
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHMotorNormalPID
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHIMUNormalPID
</UL>

<P><STRONG><a name="[14c]"></a>Cloud_AngleLimit</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, cloud_control.o(i.Cloud_AngleLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Cloud_AngleLimit &rArr; IMU_LimUpdate &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_LimUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithoutIMU
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithIMU
</UL>

<P><STRONG><a name="[14e]"></a>Cloud_ClearIMUPIDData</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cloud_control.o(i.Cloud_ClearIMUPIDData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cloud_ClearIMUPIDData
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithoutIMU
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithIMU
</UL>

<P><STRONG><a name="[14f]"></a>Cloud_ClearMoterPIDData</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cloud_control.o(i.Cloud_ClearMoterPIDData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cloud_ClearMoterPIDData
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithoutIMU
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithIMU
</UL>

<P><STRONG><a name="[154]"></a>Cloud_PITCHIMUNormalPID</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cloud_control.o(i.Cloud_PITCHIMUNormalPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Cloud_PITCHIMUNormalPID &rArr; Clear_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_VisionFusion
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithIMU
</UL>

<P><STRONG><a name="[155]"></a>Cloud_PITCHIMUVisionPID</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, cloud_control.o(i.Cloud_PITCHIMUVisionPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Cloud_PITCHIMUVisionPID &rArr; Cloud_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithIMU
</UL>

<P><STRONG><a name="[157]"></a>Cloud_PITCHMotorNormalPID</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cloud_control.o(i.Cloud_PITCHMotorNormalPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Cloud_PITCHMotorNormalPID &rArr; Clear_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_VisionFusion
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithoutIMU
</UL>

<P><STRONG><a name="[158]"></a>Cloud_PITCHMotorVisionPID</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, cloud_control.o(i.Cloud_PITCHMotorVisionPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = Cloud_PITCHMotorVisionPID &rArr; Cloud_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithoutIMU
</UL>

<P><STRONG><a name="[156]"></a>Cloud_VisionFusion</STRONG> (Thumb, 746 bytes, Stack size 72 bytes, cloud_control.o(i.Cloud_VisionFusion))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Cloud_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman_filter_calc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAMP_float
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Target_Speed_Calc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVisionAngle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWMotorVisionPID
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_YAWIMUVisionPID
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHMotorVisionPID
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_PITCHIMUVisionPID
</UL>

<P><STRONG><a name="[15b]"></a>Cloud_YAWIMUNormalPID</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, cloud_control.o(i.Cloud_YAWIMUNormalPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Cloud_YAWIMUNormalPID &rArr; Clear_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_VisionFusion
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithIMU
</UL>

<P><STRONG><a name="[15c]"></a>Cloud_YAWIMUVisionPID</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, cloud_control.o(i.Cloud_YAWIMUVisionPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Cloud_YAWIMUVisionPID &rArr; Cloud_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithIMU
</UL>

<P><STRONG><a name="[15d]"></a>Cloud_YAWMotorNormalPID</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, cloud_control.o(i.Cloud_YAWMotorNormalPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Cloud_YAWMotorNormalPID &rArr; Clear_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_VisionFusion
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithoutIMU
</UL>

<P><STRONG><a name="[15e]"></a>Cloud_YAWMotorVisionPID</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, cloud_control.o(i.Cloud_YAWMotorVisionPID))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Cloud_YAWMotorVisionPID &rArr; Cloud_VisionFusion &rArr; kalman_filter_calc &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_PositionPIDData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_VisionFusion
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithoutIMU
</UL>

<P><STRONG><a name="[1d4]"></a>Cloud_getPitchAngleWithDown</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cloud_control.o(i.Cloud_getPitchAngleWithDown))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_LimUpdate
</UL>

<P><STRONG><a name="[1d3]"></a>Cloud_getPitchAngleWithUp</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cloud_control.o(i.Cloud_getPitchAngleWithUp))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_LimUpdate
</UL>

<P><STRONG><a name="[151]"></a>Cloud_setIMUPosForced</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cloud_control.o(i.Cloud_setIMUPosForced))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUData_chance
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithoutIMU
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_processing_WithIMU
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Init
</UL>

<P><STRONG><a name="[14d]"></a>IMU_LimUpdate</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, cloud_control.o(i.IMU_LimUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IMU_LimUpdate &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_getPitchAngleWithUp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_getPitchAngleWithDown
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_AngleLimit
</UL>

<P><STRONG><a name="[20e]"></a>SendVisionData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, control_vision.o(i.SendVisionData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SendVisionData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_VisionTarget
</UL>

<P><STRONG><a name="[219]"></a>USART_Receive_DMA_NO_IT</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, control_vision.o(i.USART_Receive_DMA_NO_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART_Receive_DMA_NO_IT &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_USART_Receive_DMA
</UL>

<P><STRONG><a name="[21c]"></a>Vision_I_T_Set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, control_vision.o(i.Vision_I_T_Set))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_ID_Init
</UL>

<P><STRONG><a name="[16f]"></a>FPS_Calculate</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, devicesmonitor.o(i.FPS_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FPS_Calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FPS
</UL>

<P><STRONG><a name="[20a]"></a>Chassis_control</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, robot_control.o(i.Chassis_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chassis_control
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_control
</UL>

<P><STRONG><a name="[20b]"></a>Cloud_control</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, robot_control.o(i.Cloud_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Cloud_control
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Robot_control
</UL>

<P><STRONG><a name="[123]"></a>AutoAttack_process</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, shoot.o(i.AutoAttack_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AutoAttack_process &rArr; Shoot_HeatLimitation &rArr; Shoot_getMaxShootAmount &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_HeatLimitation
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_setNeedLaunchCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_processing
</UL>

<P><STRONG><a name="[15f]"></a>ConAttack_process</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, shoot.o(i.ConAttack_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ConAttack_process &rArr; Shoot_HeatLimitation &rArr; Shoot_getMaxShootAmount &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_HeatLimitation
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_setNeedLaunchCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_processing
</UL>

<P><STRONG><a name="[160]"></a>CountLaunchBullet</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, shoot.o(i.CountLaunchBullet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CountLaunchBullet &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PillReload_processing
</UL>

<P><STRONG><a name="[177]"></a>Detection_FricSpeed</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, shoot.o(i.Detection_FricSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_processing
</UL>

<P><STRONG><a name="[176]"></a>Fric_processing</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, shoot.o(i.Fric_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fric_processing
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFricSpeed
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Detection_FricSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_processing
</UL>

<P><STRONG><a name="[178]"></a>GetFricSpeed</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, shoot.o(i.GetFricSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_processing
</UL>

<P><STRONG><a name="[1fd]"></a>Manual_Attack_process</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, shoot.o(i.Manual_Attack_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Manual_Attack_process &rArr; Shoot_HeatLimitation &rArr; Shoot_getMaxShootAmount &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_HeatLimitation
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_setNeedLaunchCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_processing
</UL>

<P><STRONG><a name="[202]"></a>PillReload_processing</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, shoot.o(i.PillReload_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PillReload_processing &rArr; CountLaunchBullet &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_ReloaderCal
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountLaunchBullet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_processing
</UL>

<P><STRONG><a name="[213]"></a>ResetPill</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, shoot.o(i.ResetPill))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_ReloaderCal
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_setNeedLaunchCount
</UL>

<P><STRONG><a name="[125]"></a>Shoot_HeatLimitation</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, shoot.o(i.Shoot_HeatLimitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Shoot_HeatLimitation &rArr; Shoot_getMaxShootAmount &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_getMaxShootAmount
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleAttack_process
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Manual_Attack_process
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConAttack_process
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAttack_process
</UL>

<P><STRONG><a name="[214]"></a>Shoot_MotorInObstruct</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, shoot.o(i.Shoot_MotorInObstruct))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_ReloaderCal
</UL>

<P><STRONG><a name="[203]"></a>Shoot_ReloaderCal</STRONG> (Thumb, 596 bytes, Stack size 24 bytes, shoot.o(i.Shoot_ReloaderCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Shoot_ReloaderCal &rArr; Position_PID
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_PID
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_MotorInObstruct
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetPill
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PillReload_processing
</UL>

<P><STRONG><a name="[211]"></a>Shoot_getMaxShootAmount</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, shoot.o(i.Shoot_getMaxShootAmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Shoot_getMaxShootAmount &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_HeatLimitation
</UL>

<P><STRONG><a name="[212]"></a>Shoot_setFricOutput</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, shoot.o(i.Shoot_setFricOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Shoot_setFricOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedRampCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_Init
</UL>

<P><STRONG><a name="[215]"></a>SingleAttack_process</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, shoot.o(i.SingleAttack_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SingleAttack_process &rArr; Shoot_HeatLimitation &rArr; Shoot_getMaxShootAmount &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_HeatLimitation
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_setNeedLaunchCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Shoot_processing
</UL>

<P><STRONG><a name="[208]"></a>RemoteMode_Update</STRONG> (Thumb, 666 bytes, Stack size 8 bytes, status_update.o(i.RemoteMode_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RemoteMode_Update &rArr; LASER_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LASER_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_Update
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_Update_IMU_Data</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, imu_compensate.o(i.HAL_Update_IMU_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Update_IMU_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_GetData_Compensate
</UL>

<P><STRONG><a name="[1d1]"></a>IMU_temp_Control</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, imu_compensate.o(i.IMU_temp_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IMU_temp_Control
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_control_temperate
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_GetData_Compensate
</UL>

<P><STRONG><a name="[1d7]"></a>get_control_temperate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, imu_compensate.o(i.get_control_temperate))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_temp_Control
</UL>

<P><STRONG><a name="[126]"></a>CAN_FILTER_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_can.o(i.CAN_FILTER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_FILTER_Init &rArr; HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IT_Init
</UL>

<P><STRONG><a name="[1e6]"></a>GetSector</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, flash_store.o(i.GetSector))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Write_FS
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_If_Erase_FS
</UL>

<P><STRONG><a name="[166]"></a>DR16_Process</STRONG> (Thumb, 414 bytes, Stack size 8 bytes, dr16_remote.o(i.DR16_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DR16_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoteControl_Output
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyMouseFlag_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DR16_Handler
</UL>

<P><STRONG><a name="[168]"></a>USART_Receive_DMA_NO_IT</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dr16_remote.o(i.USART_Receive_DMA_NO_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART_Receive_DMA_NO_IT &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DR16_USART_Receive_DMA
</UL>

<P><STRONG><a name="[1d9]"></a>USART_Receive_DMA_NO_IT</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rm_judgesystem.o(i.USART_Receive_DMA_NO_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART_Receive_DMA_NO_IT &rArr; HAL_DMA_Start &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeSystem_USART_Receive_DMA
</UL>

<P><STRONG><a name="[1d6]"></a>IMUChassis_processing</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, wolf_gyimu.o(i.IMUChassis_processing))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_processing
</UL>

<P><STRONG><a name="[1d5]"></a>IMUCloud_processing</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, wolf_gyimu.o(i.IMUCloud_processing))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_processing
</UL>

<P><STRONG><a name="[1ce]"></a>MPU6500_DataCopy</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, dji_imu.o(i.MPU6500_DataCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MPU6500_DataCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_IIRLPF
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_imu_attitude_update
</UL>

<P><STRONG><a name="[1d0]"></a>ist8310_get_data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dji_imu.o(i.ist8310_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ist8310_get_data &rArr; mpu_read_bytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpu_get_data
</UL>

<P><STRONG><a name="[236]"></a>ist8310_init</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, dji_imu.o(i.ist8310_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ist8310_init &rArr; mpu_master_i2c_auto_read_config &rArr; mpu_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_master_i2c_auto_read_config
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist_reg_write_by_mpu
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist_reg_read_by_mpu
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_device_init
</UL>

<P><STRONG><a name="[239]"></a>ist_reg_read_by_mpu</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dji_imu.o(i.ist_reg_read_by_mpu))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ist_reg_read_by_mpu &rArr; mpu_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>

<P><STRONG><a name="[238]"></a>ist_reg_write_by_mpu</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dji_imu.o(i.ist_reg_write_by_mpu))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ist_reg_write_by_mpu &rArr; mpu_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>

<P><STRONG><a name="[164]"></a>mpu_device_init</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, dji_imu.o(i.mpu_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mpu_device_init &rArr; ist8310_init &rArr; mpu_master_i2c_auto_read_config &rArr; mpu_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_byte
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_offset_fetch
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJI_IMU_Init
</UL>

<P><STRONG><a name="[23a]"></a>mpu_master_i2c_auto_read_config</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dji_imu.o(i.mpu_master_i2c_auto_read_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mpu_master_i2c_auto_read_config &rArr; mpu_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>

<P><STRONG><a name="[245]"></a>mpu_offset_fetch</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, dji_imu.o(i.mpu_offset_fetch))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_device_init
</UL>

<P><STRONG><a name="[23b]"></a>mpu_read_byte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dji_imu.o(i.mpu_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpu_read_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_device_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist_reg_read_by_mpu
</UL>

<P><STRONG><a name="[1cf]"></a>mpu_read_bytes</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dji_imu.o(i.mpu_read_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_read_bytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_mpu_get_data
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_get_data
</UL>

<P><STRONG><a name="[244]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dji_imu.o(i.mpu_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_set_accel_fsr &rArr; mpu_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_device_init
</UL>

<P><STRONG><a name="[243]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dji_imu.o(i.mpu_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpu_set_gyro_fsr &rArr; mpu_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_device_init
</UL>

<P><STRONG><a name="[237]"></a>mpu_write_byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dji_imu.o(i.mpu_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpu_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_master_i2c_auto_read_config
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_device_init
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist_reg_write_by_mpu
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist_reg_read_by_mpu
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>

<P><STRONG><a name="[230]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21e]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[232]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[231]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e9]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
